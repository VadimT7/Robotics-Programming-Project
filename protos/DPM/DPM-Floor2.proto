#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# DPM Testing Floor

PROTO DPM-Floor2 [
  field SFString   name     "floor"
  field SFVec2f    dimension   10 10            # Defines the size of the floor (number of tiles in each dimension)
  
  field SFBool     infiniteCollisionObject  FALSE #Determines whether an infinite or finite bounding object should be defined
  
  field SFFloat    tileSize     0.3048
  field SFFloat    tileBorderSize   0.005
  field SFColor    tileMainColor1    0.5 0.5 1
  field SFColor    tileMainColor2    1 0.5 0.5
  field SFColor    tileEdgeColor    0 0 0
  field SFBool     tileDrawBackFace TRUE #Determines if back face should be drawn as well (makes floor transparent when view from underneath)
  
  
  
  field SFFloat    wallHeight      0.1                    # Defines the height of the walls.
  field SFFloat    wallThickness   0.01                   # Defines the thickness of the walls.
  field MFNode     children        []            # Add object (obstacles) to the world here
  
]
{
  %{
    local nTiles = fields.dimension.value
    local floorSize = {x=math.floor(nTiles.x)*fields.tileSize.value, y=math.floor(nTiles.y)*fields.tileSize.value}    
    local wallThickness = fields.wallThickness.value
    local wallHeight = fields.wallHeight.value
  }%
  Group {
    children [
    #Tiles
    %{ for x = 0,math.floor(nTiles.x)-1 do }%
      %{ for y = 0,math.floor(nTiles.y)-1 do }%
        DPM-Tile {
         name "%{= fields.name.value .. string.format('[%d][%d]',x,y) }%"
         translation %{= x*fields.tileSize.value }% 0 %{= y*fields.tileSize.value }%
         tileSize IS tileSize
         borderSize IS tileBorderSize
         %{ if(x<(math.floor(nTiles.x)-1)/2) then }%
           mainColor IS tileMainColor1
         %{ else }%
           mainColor IS tileMainColor2
         %{ end }%
         edgeColor IS tileEdgeColor
         boundingObject  FALSE
         drawBackFace IS tileDrawBackFace
        }
      %{ end }%
    %{ end }%
    #Floor Bounding Solid 
    Solid {
      name "%{= fields.name.value .. '-collisionSolid' }%"
      translation 0 0 0
      rotation 0 1 0 0
      contactMaterial "DPM-Tile"
      %{ if(fields.infiniteCollisionObject.value) then }%
        boundingObject Plane {
        }
      %{ else }%
        boundingObject Transform {
          translation %{=floorSize.x/2}% 0 %{=floorSize.y/2}%
          children [
            Plane {
              size  %{=floorSize.x/2}% %{=floorSize.y/2}%
            }
          ]
        }
      %{ end }%
      locked TRUE
    }
    #User defined objects
    Group {
      children IS children
    }   
    
    #Walls 
    #Wall along x axis at y=0 (add a bit of length to cover the corner gaps and provide a solid wall)
    #This causes some minor depth buffer "fighting?", but only on the outside corners
    SolidBox {
      name "%{= fields.name.value .. '-wall1' }%"
      translation %{=floorSize.x/2}% %{= wallHeight / 2 }% %{=-wallThickness/2}%
      size %{= floorSize.x+2*wallThickness }% %{= wallHeight }% %{= wallThickness }%
      contactMaterial "default"
      appearance PBRAppearance {
        baseColorMap ImageTexture { url [ "textures/wall_baseColor.jpg" ] }
        normalMap ImageTexture { url [ "textures/wall_normal.jpg" ] }
        normalMapFactor 0.8
        occlusionMap ImageTexture { url [ "textures/wall_occlusion.jpg" ] }
        metalness 0
        roughness 1
      }
    }
    #Wall along x axis at y=floorSize.y (add a bit of length to cover the corner gaps and provide a solid wall)
    SolidBox {
      name "%{= fields.name.value .. '-wall2' }%"
      translation %{=floorSize.x/2}% %{= wallHeight / 2 }% %{=floorSize.y+wallThickness/2}%
      size %{= floorSize.x+2*wallThickness }% %{= wallHeight }% %{= wallThickness }%
      contactMaterial "default"
      appearance PBRAppearance {
        baseColorMap ImageTexture { url [ "textures/wall_baseColor.jpg" ] }
        normalMap ImageTexture { url [ "textures/wall_normal.jpg" ] }
        normalMapFactor 0.8
        occlusionMap ImageTexture { url [ "textures/wall_occlusion.jpg" ] }
        metalness 0
        roughness 1
      }
    }
    #Wall along y axis at x=0
    SolidBox {
      name "%{= fields.name.value .. '-wall3' }%"
      translation %{=-wallThickness/2}% %{= wallHeight / 2 }% %{=floorSize.y/2}%
      size %{= wallThickness }% %{= wallHeight }% %{= floorSize.y }%
      contactMaterial "default"
      appearance PBRAppearance {
        baseColorMap ImageTexture { url [ "textures/wall_baseColor.jpg" ] }
        normalMap ImageTexture { url [ "textures/wall_normal.jpg" ] }
        normalMapFactor 0.8
        occlusionMap ImageTexture { url [ "textures/wall_occlusion.jpg" ] }
        metalness 0
        roughness 1
      }
    }
    #Wall along y axis at x=floorSize.x
    SolidBox {
      name "%{= fields.name.value .. '-wall4' }%"
      translation %{=floorSize.x+wallThickness/2}% %{= wallHeight / 2 }% %{=floorSize.y/2}%
      size %{= wallThickness }% %{= wallHeight }% %{= floorSize.y }%
      contactMaterial "default"
      appearance PBRAppearance {
        baseColorMap ImageTexture { url [ "textures/wall_baseColor.jpg" ] }
        normalMap ImageTexture { url [ "textures/wall_normal.jpg" ] }
        normalMapFactor 0.8
        occlusionMap ImageTexture { url [ "textures/wall_occlusion.jpg" ] }
        metalness 0
        roughness 1
      }
    }
  ]
  }
}
